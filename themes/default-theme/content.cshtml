@using System.Net.Http;
@using Markdig;
@using CommunicatorCms;
@using CommunicatorCms.Core;
@using CommunicatorCms.Core.Settings;
@using CommunicatorCms.Core.Actions;
@using CommunicatorCms.Core.AppFileSystem;

@inject RequestState RequestState;

@functions
{
    public int _cbIdSuffix = 0;
    public string _cbIdPrefix = "side-nav-cb";


    public async Task RenderNavigationItem(SourcePage sourcePage, SourcePage activePage, int maxDepth = -1)
    {
        if (!sourcePage.Properties.ShowInNavigationMenus)
        {
            return;
        }

        <div style="flex: @sourcePage.PropertiesLayout.SpaceBefore.ToString(App.AmericanCultureInfo)">
        </div>

        var activeClass = "";
        var checkedAttribute = "";

        if (sourcePage.Url == activePage.Url)
        {
            activeClass = "hn-active";
            checkedAttribute = "checked";
        }
        else if (sourcePage.Url != "/" && sourcePage.Url.Count(c => c == '/') >= 3 && AppPath.IsParentUrl(sourcePage.Url, activePage.Url))
        {
            activeClass = "hn-active-child";
            checkedAttribute = "checked";
        }

        var subPages = await sourcePage.GetSubPages();

        if (subPages.Count == 0 || maxDepth == 0)
        {
            <a class="hn-item @activeClass @sourcePage.PropertiesLayout.CssClasses" style="@sourcePage.PropertiesLayout.CssInline" href="@sourcePage.Url">

                @{
                    if (!string.IsNullOrEmpty(sourcePage.Properties.Icon))
                    {
                        <span class="hn-icon">
                            @sourcePage.Properties.Icon
                        </span>
                    }
                }
                <span class="hn-content">
                    @sourcePage.Properties.Title
                </span>
            </a>
        }
        else
        {
            _cbIdSuffix++;
            <div class="hn-expand">
                <input type="checkbox" id="@_cbIdPrefix@_cbIdSuffix" class="hn-input-state" @checkedAttribute>

                <div class="hn-item @activeClass @sourcePage.PropertiesLayout.CssClasses" style="@sourcePage.PropertiesLayout.CssInline">
                    <a class="hn-link" href="@sourcePage.Url">
                        @{
                            if (!string.IsNullOrEmpty(sourcePage.Properties.Icon))
                            {
                                <span class="hn-icon">
                                    @sourcePage.Properties.Icon
                                </span>
                            }
                        }
                        <span class="hn-content">
                            @sourcePage.Properties.Title
                        </span>
                    </a>

                    <label for="@_cbIdPrefix@_cbIdSuffix" class="hn-input">
                        <span class="hn-input-default">
                            <i class="ri-add-line"></i>
                        </span>
                        <span class="hn-input-active">
                            <i class="ri-subtract-line"></i>
                        </span>
                    </label>
                </div>

                <div class="hn-expand-body">
                    @{
                        maxDepth--;
                        foreach (var subPage in subPages)
                        {
                            await RenderNavigationItem(subPage, activePage, maxDepth);
                        }
                    }
                </div>

            </div>
                        }

                        if (sourcePage.PropertiesLayout.SpaceAfter != 0)
                        {
            <div style="flex: @sourcePage.PropertiesLayout.SpaceAfter.ToString(App.AmericanCultureInfo)">
            </div>
        }
    }
}

@{
    var currentPage = await RequestState.GetCurrentPage();
    var currentActiveTopPage = await RequestState.GetPageByUrl(AppPath.GetUrlWithMaxNumberOfSlashes(currentPage.Url, 2));
    var a = 0;
}

@{
    if (currentPage.Properties.Layout == "LandingPage")
    {
        await currentPage.Render(this, this.Html);
    }
    else
    {
        <section class="section" style="padding-top: 7rem; ">
            <div class="container" style="font-size: 1.6rem; overflow: hidden">
                <div class="columns">

                    @{
                        if (currentPage.Properties.ShowSideNavigationMenu)
                        {
                            <div class="column is-one-fifth">
                                <nav class="hyper-nav hn-side" style="width: 100%">
                                    <div class="hn-nav">
                                        <div class="hn-section hn-section-body">
                                            @{
                                                await RenderNavigationItem(currentActiveTopPage, currentPage, 0);

                                                foreach (var subPage in await currentActiveTopPage.GetSubPages())
                                                {
                                                    await RenderNavigationItem(subPage, currentPage);
                                                }
                                            }
                                        </div>
                                    </div>
                                </nav>
                            </div>
                        }

                    }

                    <div class="column content">
                        @{
                            await currentPage.Render(this, this.Html);
                        }
                    </div>
                </div>
            </div>

        </section>
    }

}





